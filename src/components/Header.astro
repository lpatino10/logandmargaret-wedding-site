---
import { t } from "i18next";
import { localizePath } from "astro-i18next";

import HeaderLink from "./HeaderLink.astro";
---

<header>
	<div id="large-header" class="header-wrapper">
		<h1>
			{"Margaret & Logan"}
		</h1>
		<nav>
			<h4 class="initials small-nav-title hide">M & L</h4>
			<HeaderLink withUnderline href={localizePath("/")}>
				{t("pages.home")}
			</HeaderLink>
			<HeaderLink withUnderline href={localizePath("/our-story")}>
				{t("pages.story")}
			</HeaderLink>
			<HeaderLink withUnderline href={localizePath("/schedule")}>
				{t("pages.schedule")}
			</HeaderLink>
			<HeaderLink withUnderline href={localizePath("/travel")}>
				{t("pages.travel")}
			</HeaderLink>
			<HeaderLink withUnderline href={localizePath("/faqs")}>
				{t("pages.faq")}
			</HeaderLink>
			<!-- <HeaderLink href="/wedding-party">Wedding Party</HeaderLink> -->
			<HeaderLink withUnderline href={localizePath("/registry")}>
				{t("pages.registry")}
			</HeaderLink>
			<!-- <HeaderLink href="/things-to-do">Things To Do</HeaderLink> -->
			<HeaderLink withUnderline href={localizePath("/rsvp")}>
				{t("pages.rsvp")}
			</HeaderLink>
		</nav>
	</div>
	<div id="small-header" class="header-wrapper">
		<h4 id="small-header-title" class="initials">M & L</h4>
		<svg
			id="menu-button"
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 448 512"
		>
			<path
				d="M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z"
			>
			</path>
		</svg>
	</div>
</header>
<div class="menu-shade">
	<div class="menu-overlay">
		<svg
			id="close-button"
			xmlns="http://www.w3.org/2000/svg"
			width="32"
			height="32"
			viewBox="0 0 384 512"
		>
			<path
				d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"
			>
			</path>
		</svg>
		<div class="shade-links">
			<HeaderLink href={localizePath("/")}>{t("pages.home")}</HeaderLink>
			<HeaderLink href={localizePath("/our-story")}>
				{t("pages.story")}
			</HeaderLink>
			<HeaderLink href={localizePath("/schedule")}>
				{t("pages.schedule")}
			</HeaderLink>
			<HeaderLink href={localizePath("/travel")}>
				{t("pages.travel")}
			</HeaderLink>
			<HeaderLink href={localizePath("/faqs")}>{t("pages.faq")}</HeaderLink>
			<!-- <HeaderLink href="/wedding-party">Wedding Party</HeaderLink> -->
			<HeaderLink href={localizePath("/registry")}>
				{t("pages.registry")}
			</HeaderLink>
			<!-- <HeaderLink href="/things-to-do">Things To Do</HeaderLink> -->
			<HeaderLink href={localizePath("/rsvp")}>{t("pages.rsvp")}</HeaderLink>
		</div>
	</div>
</div>
<script>
	const smallTitle = document.querySelector(".small-nav-title");
	const toggleVisibility = (entries: IntersectionObserverEntry[]) => {
		if (!smallTitle) {
			return;
		}

		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				smallTitle.classList.add("hide");
				smallTitle.classList.remove("show");
			} else {
				smallTitle.classList.remove("hide");
				smallTitle.classList.add("show");
			}
		});
	};
	const observer = new IntersectionObserver(toggleVisibility);

	const mainTitle = document.querySelector("h1");
	if (mainTitle) {
		observer.observe(mainTitle);
	}
</script>
<script>
	const bodyEl = document.querySelector("body");
	const menuButton = document.querySelector("#menu-button");
	const menuShade = document.querySelector(".menu-shade");
	const menuOverlay = document.querySelector(".menu-overlay");
	const closeButton = document.querySelector("#close-button");

	if (bodyEl && menuButton && menuShade) {
		menuButton.addEventListener("click", () => {
			(menuShade as HTMLDivElement).style.height = "100vh";
			(menuOverlay as HTMLDivElement).style.backgroundColor = "transparent";
			bodyEl.style.overflow = "hidden";
		});
	}

	if (bodyEl && closeButton && menuShade) {
		closeButton.addEventListener("click", () => {
			(menuShade as HTMLDivElement).style.height = "0";
			(menuOverlay as HTMLDivElement).style.backgroundColor = "var(--pink)";
			bodyEl.style.overflow = "initial";
		});
	}
</script>
<style>
	header {
		display: contents;
		position: relative;
		z-index: 999;
	}

	nav {
		background-color: var(--pink);
		padding: 1rem 0 1rem 0;
		position: sticky;
		top: 0;
	}

	nav a {
		margin-right: 1.5rem;
	}

	svg {
		fill: var(--dark-red);
	}

	.header-wrapper {
		background-color: var(--pink);
		height: 100%;
		width: 100%;
	}

	#large-header {
		display: none;
		text-align: center;
	}

	#small-header {
		align-items: center;
		display: flex;
		justify-content: space-between;
		position: sticky;
		top: 0;
	}

	.initials {
		color: var(--dark-red);
		font-family: "NickainleyNormal", cursive;
		margin: 0;
	}

	.small-nav-title {
		left: 20px;
		position: absolute;
		top: 12px;
		transition: opacity 0.3s;
	}

	#small-header-title {
		padding: 0.5rem 0 0.5rem 20px;
	}

	.menu-shade {
		background-image: url("../images/transparent-bg.png");
		background-attachment: scroll;
		background-repeat: no-repeat;
		background-position: center;
		background-size: cover;
		height: 100%;
		background-color: var(--pink);

		display: flex;
		flex-direction: column;
		height: 0;
		overflow: scroll;
		position: fixed;
		top: 0;
		width: 100%;
		z-index: 1000;
		transition: height 0.5s;

		-ms-overflow-style: none;
		scrollbar-width: none;
	}

	.menu-shade::-webkit-scrollbar {
		display: none;
	}

	.menu-overlay {
		background-color: var(--pink);
		display: flex;
		flex-direction: column;
		height: 100%;
		opacity: 1;
		width: 100%;

		transition: background-color 0.3s 0.4s;
	}

	.shade-links {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		padding-bottom: 4rem;
		padding-top: 4rem;
		text-align: center;
	}

	#menu-button {
		padding-right: 20px;
	}

	#close-button {
		position: absolute;
		right: 16px;
		top: 14px;
	}

	.hide {
		opacity: 0;
		visibility: hidden;
	}

	.show {
		opacity: 1;
		visibility: visible;
	}

	@media (min-width: 1200px) {
		#large-header {
			display: contents;
		}

		#small-header {
			display: none;
		}
	}
</style>
